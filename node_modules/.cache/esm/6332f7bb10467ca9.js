let Joi,User,bcrypt,JwtService;_104‍.x([["default",()=>_104‍.o]]);_104‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_104‍.w("../../models",[["User",["User"],function(v){User=v}]]);_104‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_104‍.w("../../services/jwtService",[["default",["JwtService"],function(v){JwtService=v}]]);




const registerController = {
    async register(req, res, next){
        // logic goes here
        
        // Validation
        const registerSchema  =Joi.object({
            name: Joi.string().min(3).max(30).required(),
            email: Joi.string().email().required(),
            password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),
            repeat_password: Joi.ref('password')
        })
        _104‍.g.console.log(req.body)
        const {error} = registerSchema.validate(req.body)
        if(error){
            return next(error)
            
        }
        res.json({msg:"Hello from express"})

        // check if user is in the database already

        try{
            const exist  = await User.exists({email: req.body.email})
            if(exist){
                return next(CustomErrorHandler.alreadyExist("This email is already taken"));
            }
        }catch(err){
            return next(err);
        }
        const {name, email, password} = req.body;
        // Hash Password
        const hashedPassword = await bcrypt.hash(password, 10)

        // prepare the model
        
        const user = new User({
            name,
            email,
            password: hashedPassword
        })
        let access_token;
        try{
            const result = await user.save()
            _104‍.g.console.log(result)
            // Token
            const access_token = JwtService.sign({_id: result._id, role: result.role})

        }catch(err){
            return next(err);
        }
        res.json({access_token: access_token})
    }
}

_104‍.d(registerController);